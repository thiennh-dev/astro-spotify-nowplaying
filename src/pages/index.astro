---
// No server-side code is needed here anymore.
// The page is static HTML, and the dynamic data is loaded by the client.
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <title>Spotify Now Playing</title>
  <style>
    :root {
      --bg-color: #121212;
      --card-color: #1e1e1e;
      --text-color: #ffffff;
      --subtle-text-color: #b3b3b3;
    }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
      background-color: var(--bg-color);
      color: var(--text-color);
      display: grid;
      place-content: center;
      min-height: 100vh;
      margin: 0;
      text-align: center;
    }
    .player {
      background: var(--card-color);
      padding: 2rem;
      border-radius: 12px;
      width: 350px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.4);
    }
    .player img {
      width: 100%;
      height: auto;
      aspect-ratio: 1 / 1;
      border-radius: 8px;
      margin-bottom: 1rem;
    }
    .player h2 {
      margin: 0.5rem 0;
      font-size: 1.5rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .player p {
      margin: 0.25rem 0;
      color: var(--subtle-text-color);
    }
    .time-fetch {
      font-size: 0.8rem;
      color: #666;
      margin-top: 1.5rem;
    }
  </style>
</head>
<body>
  <main>
    <div id="spotify-player" class="player">
      <h2>Loading Spotify Data...</h2>
    </div>
  </main>

  <script>
    const playerElement = document.getElementById('spotify-player');

    /**
     * Formats milliseconds into a MM:SS time string.
     * @param ms - The time in milliseconds. 
     */
    function formatTime(ms: number): string {
      const totalSeconds = Math.floor(ms / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    /** 
     * Fetches data from our API route and updates the DOM.
     */
    async function fetchNowPlaying() {
      // This is a "guard clause" to prevent errors if the element isn't found.
      // It solves the "'playerElement' is possibly 'null'" TypeScript error.
      if (!playerElement) {
        console.error('Fatal Error: The player element was not found in the DOM.');
        return;
      }

      try {
        // We fetch from our own API route, not directly from Spotify.
        const response = await fetch('/api/spotify.json');
        if (!response.ok) throw new Error(`Server returned ${response.status}`);
        
        const data = await response.json();

        // Get the current time in your local timezone (GMT+7)
        const fetchTime = new Date().toLocaleTimeString('en-GB', { timeZone: 'Asia/Ho_Chi_Minh' });

        if (data.isPlaying) {
          playerElement.innerHTML = `
            <img src="${data.albumImageUrl}" alt="Album cover for ${data.title}">
            <h2>${data.title}</h2>
            <p><strong>${data.artist}</strong></p>
            <p>${formatTime(data.timestamp)} / ${formatTime(data.duration)}</p>
            <p class="time-fetch">Last update: ${fetchTime} (GMT+7)</p>
          `;
        } else {
          playerElement.innerHTML = `
            <h2>Not Currently Playing</h2>
            <p>Spotify is silent right now.</p>
            <p class="time-fetch">Last update: ${fetchTime} (GMT+7)</p>
          `;
        }
      } catch (error) {
        console.error('Error fetching Now Playing data:', error);
        if (playerElement) {
           playerElement.innerHTML = `<p>Could not fetch data. Please try again later.</p>`;
        }
      }
    }

    // Run the function on page load
    fetchNowPlaying();

    // And then run it again every 5 seconds
    setInterval(fetchNowPlaying, 5000);
  </script>
</body>
</html>